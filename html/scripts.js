

// html/App.coffee
// Generated by CoffeeScript 1.8.0
angular.module("gatherApp", []);

// html/DataService.coffee
// Generated by CoffeeScript 1.8.0
angular.module("gatherApp").service("DataService", [
  "$http", function($http) {
    this.getMain = function(callback) {
      return $http({
        url: "/api/main",
        method: "GET"
      }).success(function(config) {
        return callback(config);
      });
    };
    return this;
  }
]);

// html/MainCtrl.coffee
// Generated by CoffeeScript 1.8.0
angular.module("gatherApp").controller("MainCtrl", [
  "$scope", "DataService", function($scope, DataService) {
    console.log("MainCtrl!");
    return DataService.getMain(function(data) {
      return $scope.data = data;
    });
  }
]);

// html/Plot.coffee
// Generated by CoffeeScript 1.8.0
$(document).ready(function() {
  var chart, data, plot, selector, title, xAxis, xScale, yAxis, yLabel, yScale;
  data = [
    {
      x: 10,
      value: 10
    }, {
      x: 20,
      value: 30
    }, {
      x: 30,
      value: 20
    }
  ];
  xScale = new Plottable.Scale.Linear();
  yScale = new Plottable.Scale.Linear();
  title = new Plottable.Component.TitleLabel("Histogram");
  yLabel = new Plottable.Component.Label("Y", "left");
  xAxis = new Plottable.Axis.Numeric(xScale, "bottom");
  yAxis = new Plottable.Axis.Numeric(yScale, "left");
  plot = new Plottable.Plot.Bar(xScale, yScale, true).addDataset(data).project("x", "x", xScale).project("y", "value", yScale).animate(true);
  selector = new Plottable.Interaction.Click().callback(function(p) {
    var bar;
    console.log("click!", p);
    bar = plot.getBars(p.x, p.y);
    if (!bar || bar.length === 0 || bar[0].length === 0) {
      return;
    }
    return console.log("click bar", bar[0][0].__data__);
  });
  plot.registerInteraction(selector);
  return chart = new Plottable.Component.Table([[null, null, title], [yLabel, yAxis, plot], [null, null, xAxis]]).renderTo("#testplot");
});
